NodeJS:
--------------------------------------------------------------------

Intro:
----------
1) Platform that allows us to run JavaScript on a computer or server.
2) Read, delete / update files
3) Easily communicate with a database

Why NodeJS is popular?
---------------------------
1) It uses javascript
2) Very fast( runs on v8 engine & uses non blocking code)
3) Open source community & npm (huge amount of open source packages)
4) Great for real time services (like chats)

3 sections
------------------
1) Inner workings of NodeJS
	* v8 engine
	* Modules
	* event emitter
	* the file system
2) Creating the web server
	* Routing
	* Express
	* Templating
3) Sample to do app
----------------------------------------------------
ATOM editor - atom.io
----------------------------------------------------

Pre requisites
------------------

1) JavaScript
2) HTML
3) little bit of command line
----------------------------------------------------

How to install NodeJS?
-------------------------------------------

nodejs.org (recommend the stable version & not the latest version)

check if node is installed in your system - cmd -> node -v
------------------------------------------------------
V8 engine - Heart of NodeJS
-----------------------------------------

JavaScript engines
-------------------
1) computer doesnot understand javascript
2) A javascript engine converts the javascript to machine code
3) Node JS is written in C++, it allows us to write code in javascript that can be run in a computer or server
4) Node JS uses the v8 engine (embedded into NodeJS) (which is also written in C++) - helps in the conversion of javascript to machine code

https://developers.google.com/v8/
				 ______________
				|  JavaScript  |
				|______________|
						|
						|
						V
		 __________________________________
		|  ______                 _____    |
		| | C++  |   Node.js     | V8  |   |
		| |______|               |_____|   |
		|__________________________________|
						|
						|
						V
				 ________________
				|  Machine Code  |
				|________________|

---------------------------------------------
The Global object
---------------------------------------------

https://nodeJS.org/api/globals.html

1) In the browser, the global object is the window - where number of operations like alert, scroll, setTimeout, setInterval can be performed.
2) In Node JS, the global object is an object called 'Global' - which provides inbuilt methods of similar operations.

-------------------------------------------
Function Expressions
-------------------------------------------

check - handsOn - function Expressions.js

-------------------------------------------
Modules - Require & Export & diff. module patterns
-------------------------------------------

2 types of modules - core & custom

eg:- for core - events, fs, util, http, etc., - number of core modules available in NPM - express, cucumber, etc.,

check - handsOn - ModulesRequire.js & useRequire.js -- for custom

-------------------------------------------
Node - event emitter
-------------------------------------------

using the core module - "events" & "util"

check - handsOn - events.js

-------------------------------------------
Reading and Writing files
-------------------------------------------
check - handsOn - files.js

-------------------------------------------

creating and removing directories
-------------------------------------------
check - handsOn - Directories.js

-------------------------------------------
Clients & Servers
-------------------------------------------

 ________            ________       
|        | Request  |        |
| Client | ------>  | Server |
|        | Response |        |
|________| <------- |________|


- The client & server communicate wth eachother using protocols

------------
protocols
------------
- set of communication rules which 2 sides agree to use when communicating

 ________            ________       
|        |  socket  |        |
| Client | <------> | Server |
|        |          |        |
|________|          |________|
 ip -                 ip -


- In order to communicate, the client needs to connect to the Ip of the server
  by opening a socket (a channel for sending info.)
- The information will be structured using any of the protocols 
  (either. http - for web apps/ ftp - for files)

  ________________________________
 |                                |
 |            (TCP)               |
 |           socket               |   TCP - transmission control protocol
 |   client <-------o-o-o- server |   o -> Packets (structured using http/ftp)
 |________________________________|


- The communication b/wn client & server is done using TCP

******
Ports - A program running on a computer can listen for requests sent to a particular port no.     
******
       - 10.148.10.22:3000 (server Ip : port) 
	   - In a computer multiple programs can be running and the specific program only responds
	     when the port number in which it is hosted is passed from the client.
	   - The program will be listening to the port & respond when a request is made

*****************
Response Headers
******************

 ________                             ________       
|        | Request + Req. Headers    |        |
| Client | ----------------------->  | Server |
|        | Response + Res. Headers   |        |
|________| <-----------------------  |________|


Headers - extra info. about the req / res

Response Headers - content-type --> plain text, html, JSON, XML
                    status --> 200 - OK, 404 - Page not found
--------------------------------------
Creating a server
--------------------------------------
 check - handsOn - server.js

--------------------------------------

Streams & Buffers
--------------------------------------
*******
Buffer
*******
                                            _________
                       _________           |         |   
   Data chunk <-----  | EEEEEE  |  <--E--  |  DATA   |  E = Piece of data
   Passed On          |_________|          |         |
                                           |_________|


- Temporary storage spot for a chunk of data that is being transferred from one place to another
- The buffer is filled with data and then passed along
- Transfer small chunks of data at a time

********
Streams
********

      Data passed on & 
	   processed                        BUFFER
 _________          ________           _________
| CLIENT  | <----- | DATA   | <------ | EEEEEE  | <--E--E--E--E--E--E----
|_________|        |________|         |_________|
                                     Once the buffer if full
									 the data is passed on

												              E = Piece of data
														_______
													   | DATA  | = Chunk of data	  	
                                                       |_______|

- stream of dats that flows from one place to another overtime 
- can create streams in NodeJS to transfer data
- increase performance

`````````
3 types:
`````````

- Writable Streams - allow NodeJS to write data to a stream (passing huge data to the client)
- Readable Streams - allow NodeJs to read data from a stream (Reading a huge file)
- Duplex streams - can read and write to a stream

refer handsOn - streams.js

------------------------------
PIPES
------------------------------

- Don't need to manually listen to events
- Don't need to manually write into a writable stream


 ___________                   
|           |                  BUFFER
|	PIPE   ________           _________
|     ___ | CHUNK  | <------ | EEEEEE  | <--E--E--E--E--E--E----
|    |    |________|         |_________|
|__  |   ___|
   | |  |                    When the buffer if full
   | V	|					 the data is passed on
   |____|
	 ___											              E = Piece of data
	| C	|												    _______
	| H	| WRITE											   | DATA  | = Chunk of data	  	
    | U | STREAM                                           |_______|
    | N |
	| K |
    |___|

      |
	  |
	  |
	  V
   ________
  | CLIENT |  	
  |________| 

-----------------------------
NPM - Node package Manager
-----------------------------
	- NPM - huge ecosystem of third party packages / modules
	- npmjs.com
	- try and install express - The other modules that are installed other than express are the dependencies.
	                            Express can function properly only when all the dependencies are available.
								Node recognizes that and installs all the dependant modules.

------------------------------
package.json
------------------------------
	- used to keep track of all the modules that our application depends on
	- cmd to create - npm init

-----------------------------
install nodemon
-----------------------------

npm install nodemon -g (global installation) - cover local / global installation

Module to continously monitor the changes in the application and restart the server

cmd  to run the app with nodemon - "nodemon index" (index - app entry point)

manual restart cmd - "rs"

-----------------------------
Express
-----------------------------
    npm install express -save (-save to save the module in package.json along with the existing packages)

	- Easy and flexible routing system
	- Integrates with many templating engines
	- contains a middleware framework

	HTTP methods (Express helps to respond to all these requests very easily)
		- GET
		- POST
		- DELETE
		- PUT

	`````````````````````````	
	Responding to requests :

	`````````````````````````
	- GET - app.get('route', fn)
	- POST - app.post('route', fn)
	- DELETE - app.delete('route', fn)
	- PUT - app.put('route', fn)

	refer handsOn - expRoute.js

-------------------------------
Templating engines
-------------------------------

- used to inject dynamic content into a html page
- embed data in the javascript code into the html files
- similar thing is used in ASP web forms <%= data %>
- we can output actual javascript codes, control flow statements, etc.

www.embeddedjs.com

npm install ejs -save

use `<%=` to output the data
use `<%` to include any javascript code

refer handsOn - index.ejs, contatc.ejs, profile.ejs, expRoute.js

------------------------------
Partial templates / views
------------------------------

- to have a common template to be used in all the views
- eg: menu navigation (like menu - will be present in all pages)

refer handsOn - /views/partials/nav.ejs , index.ejs

-----------------------------------
Serving static files & middleware
-----------------------------------

Middleware - The code that runs b/wn the request & the response

app.get('/contact', function(req, res) {  --> Request
	Console.log('Do Something'); --> Middleware
    res.sendFile(__dirname + '/contact.html'); -->Response
});

app.use --> to use some Middleware

Eg: app.use('/assets', function (req, res, next) {
		console.log(req.url);
		next();
	});

	app.get();

	'/assets' - route attached to the middleware
	 next() - to specify node to run the next middleware/ next request
	       - If next() is not used, the code will break

refer handsOn - /assets/styles.css, expRoute.js

-------------------------------------
Query Strings
-------------------------------------
mysite.com/blog/news?page=2 --> the param after the '?' - page=2 is the query string
mysite.com/contact?person=ryu&dept=marketing --> to pass 2 query string params

refer handsOn - expRoute.js, contact.ejs

-------------------------------------
Handling POST requests
-------------------------------------
- POST is a request method
- POST requests, ask the server to accept/store data which is enclosed in the body of the request
- Often used when submitting forms

npm install body-parser - save

refer handsOn - expRoute.js, contact.ejs, contact-success.ejs

module - Nodemailer - to send emails














